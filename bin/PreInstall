#!/bin/bash
#
# Short:    Perform pre-install checks
# Author:   Mark J Swift
# Version:  3.2.24
# Modified: 04-Apr-2022
#
#
# Called as follows (by Install as root):    
#   PreInstall
#
# requires
#  GLB_BC_FALSE
#  GLB_BC_TRUE
#  GLB_IC_MSGLEVELERR
#  GLB_IC_MSGLEVELINFO
#  GLB_NF_LOGMESSAGE
#  GLB_SC_PROJECTNAME
#  GLB_SC_PROJECTSIGNATURE
#  GLB_SC_PROJECTVERSION
#  GLB_SV_CODEVERSION
#  GLB_SV_PROJECTDIRPATH
#  GLB_SV_RUNUSERNAME
#  GLB_SV_THISSCRIPTNAME
#  GLB_SV_THISSCRIPTTEMPDIRPATH


# ---
  
# Assume that all code is run from a subdirectory of the main project directory
GLB_SV_PROJECTDIRPATH="$(dirname $(dirname ${0}))"

# ---

GLB_SV_CODEVERSION="3.2.24"

# ---

# Include the Base Defs library (if it is not already loaded)
if [ -z "${GLB_BC_BASEDEFS_INCLUDED}" ]
then
  . "${GLB_SV_PROJECTDIRPATH}"/inc-sh/BaseDefs.sh

  # Exit if something went wrong unexpectedly
  if [ -z "${GLB_BC_BASEDEFS_INCLUDED}" ]
  then
    echo >&2 "Something unexpected happened"
    exit 90
  fi
fi

# By the time we get here, quite a few global variables have been set up.

# ---

# Exit if not the root user
if [ "${GLB_SV_RUNUSERNAME}" != "root" ]
then
  GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELERR} "Unable to run, try: sudo ${GLB_SV_THISSCRIPTNAME}"
  exit 91
fi

# ---

# Where we should install
sv_RootDirPath="${1}"

if [ "${sv_RootDirPath}" = "/" ]
then
  sv_RootDirPath=""
fi

# ---

if_VersionStringToNumber()
{
  local sv_VersionAsString
  local iv_VersionAsNumber
  local iv_Num
  
  sv_VersionAsString="${1}"
  
  iv_VersionAsNumber=0
  for iv_Num in $(echo ${sv_VersionAsString}".0.0.0.0" | cut -d"." -f1-4 | tr "." "\n")
  do
    iv_VersionAsNumber=$((${iv_VersionAsNumber}*256+${iv_Num}))
  done
  
  echo ${iv_VersionAsNumber}
}

# ---

GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Performing pre-install checks"

if test -z "${sv_RootDirPath}"
then
  bv_DoUninstall=${GLB_BC_FALSE}
  
  sv_InstalledVersion="$(pkgutil --pkg-info ${GLB_SC_PROJECTSIGNATURE} | grep -i "version:" | cut -d" " -f2)"
  if test -z "${sv_InstalledVersion}"
  then
    GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Installing ${GLB_SC_PROJECTNAME} version ${GLB_SC_PROJECTVERSION}"

  else
    iv_ProjectVersionAsNumber=$(if_VersionStringToNumber "${GLB_SC_PROJECTVERSION}")
    iv_InstalledVersionAsNumber=$(if_VersionStringToNumber "${sv_InstalledVersion}")
    if [ ${iv_ProjectVersionAsNumber} -eq ${iv_InstalledVersionAsNumber} ]
    then
      GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Re-installing ${GLB_SC_PROJECTNAME} version ${GLB_SC_PROJECTVERSION}"
      
    else
      if [ ${iv_ProjectVersionAsNumber} -lt ${iv_InstalledVersionAsNumber} ]
      then
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Downgrading ${GLB_SC_PROJECTNAME} from version ${sv_InstalledVersion} to version ${GLB_SC_PROJECTVERSION} (requires an uninstall)."
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Downgrade requires an uninstall."
        bv_DoUninstall=${GLB_BC_TRUE}

      else
        GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Updating ${GLB_SC_PROJECTNAME} from version ${sv_InstalledVersion} to version ${GLB_SC_PROJECTVERSION}."
        if [ "$(echo ${GLB_SC_PROJECTVERSION}.0.0.0 | cut -d'.' -f1-2)" != "$(echo ${sv_InstalledVersion}.0.0.0 | cut -d'.' -f1-2)" ]
        then
          GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "Non-patch (major or minor) update requires an uninstall."
          bv_DoUninstall=${GLB_BC_TRUE}
        fi
      
      fi
    
    fi

  fi

  if [ "${bv_DoUninstall}" = ${GLB_BC_TRUE} ]
  then  
    "${GLB_SV_PROJECTDIRPATH}"/bin/UnInstall
    iv_Error="$?"
    if [ "${iv_Error}" != "0" ]
    then
      exit ${iv_Error}
    fi
  fi

fi

GLB_NF_LOGMESSAGE ${GLB_IC_MSGLEVELINFO} "OK to install."

# Remove temporary files
cd "${GLB_SV_PROJECTDIRPATH}"
rm -fR "${GLB_SV_THISSCRIPTTEMPDIRPATH}"

exit 0

